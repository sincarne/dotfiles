# Simple calculator
function calc() {
	local result=""
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//'   # remove trailing zeros
	else
		printf "$result"
	fi
	printf "\n"
}

# Dump HTMLified Markdown into lynx
function vmd() {
	pandoc --to=html "$@" | lynx -stdin
}

# Quickly get image dimensions from the command line
# http://brettterpstra.com/2013/07/24/bash-image-tools-for-web-designers/
function imgsize() {
    local width height
    if [[ -f $1 ]]; then
        height=$(sips -g pixelHeight "$1"|tail -n 1|awk '{print $2}')
        width=$(sips -g pixelWidth "$1"|tail -n 1|awk '{print $2}')
        echo "width=\"${width}\" height=\"${height}\""
    else
        echo "File not found"
    fi
}

# Create a new directory and enter it
function mcd() {
	mkdir -p "$@" && cd "$@"
}

# Start the PHP web server
function serve() {
	if [ $# -eq 0 ]; then
		php -S localhost:8000
	else
		php -S localhost:"$@"
	fi
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# simpler find (from https://github.com/epochblue/dotfiles/blob/master/.bash_aliases)
function f() {
  find . -iname "*$1*";
}

# Dump contents of file to Firefox
function toffox() {
	if [ ! -e '$HOME/tmp' ]; then
    cd $HOME
    mkdir tmp
  fi
  
  if [ -e '$HOME/tmp/temp-html.html' ]; then
    rm $HOME/tmp/temp-html.html
  fi
  
  pandoc "$@" --to=html --output=$HOME/tmp/temp-html.html
  open -a /Applications/Firefox.app file:///$HOME/tmp/temp-html.html
}

# `o` with no arguments opens current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}

# Run middleman either at port 4567, or at specified port
function mids() {
	if [ $# -eq 0 ]; then
		bundle exec middleman server
	else
		bundle exec middleman server -p $1
	fi
}

# Open URL in frontmost tab of Safari in lynx
function slynx() {
	lynx --nocolor "$(osascript -e 'tell application "Safari" to do shell script "echo " & (URL of current tab of first window as string)')"
}

# From (brianloveswords)[https://gist.github.com/brianloveswords]
# There are so many great GIFs out there and I want to have copies of them.
# Twitter makes that harder than it should be by converting them to MP4 and not
# providing access to the source material. To make it easier, I made a bash
# pipeline that takes a tweet URL and a filename, extracts the MP4 from that
# tweet and uses ffmpeg to convert back to GIF.
# https://gist.github.com/brianloveswords/7534169715b5750a892cddcf54c2aa0e
video-url-from-tweet() {
    if [ "$1" ]; then
        url=$1
    else
        echo "Must provide a url"
        return 1
    fi

    curl --silent $url |\
        # should find the <meta> tag with content="<thumbnail url>"
        (grep -m1 "tweet_video_thumb" ||\
          echo "Could not find video" && return 1) |\

        # from: <meta property="og:image" content="https://pbs.twimg.com/tweet_video_thumb/xxxxxxxxxx.jpg">
        # to: https://pbs.twimg.com/tweet_video_thumb/xxxxxxxxxx.jpg
        cut -d '"' -f 4 |\

        # from: https://pbs.twimg.com/tweet_video_thumb/xxxxxxxxxx.jpg
        # to: https://video.twimg.com/tweet_video/xxxxxxxxxx.mp4
        sed 's/.jpg/.mp4/g' |\
        sed 's/pbs.twimg.com\/tweet_video_thumb/video.twimg.com\/tweet_video/g'
}
video-from-tweet() {
    if [ "$1" ]; then
        url=$1
    else
        echo "Must provide a url"
        return 1
    fi
    curl $(video-url-from-tweet $url)
}
video-to-gif() {
    # derived from https://engineering.giphy.com/how-to-make-gifs-with-ffmpeg/
    if [ "$2" ]; then
        input=$1
        output=$2
    else
        echo "Must provide an input file and output file"
        return 1
    fi

    ffmpeg -i $input \
           -filter_complex "[0:v] split [a][b];[a] palettegen [p];[b][p] paletteuse" \
           -f gif \
           $output
}
gif-from-tweet() {
    if [ "$2" ]; then
        url=$1
        output=$2
    else
        echo "Must provide a url and an output filename"
        return 1
    fi
    video-from-tweet $url | video-to-gif - $output
}
